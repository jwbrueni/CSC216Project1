package edu.ncsu.csc216.fire;

import java.util.Random;

/**
 * @author Andrew Kofink and James Bruening
 */
public class Cell extends Grid {
	
	/**
	 * An empty cell
	 */
	public static final int EMPTY = 0;
	
	/**
	 * A tree cell
	 */
	public static final int TREE = 1;
	
	/**
	 * A burning cell
	 */
	public static final int BURNING = 2;
	
	/**
	 * The probability of trees catching fire
	 */
	public static final double PROBCATCH = .55;
	
	/**
	 * Holds the state of the cell
	 */
	private int state;
	
	/**
	 * A Cell object inside a Grid
	 * @param state The state of the cell
	 */
	public Cell(int state) {
		super(state, PROBCATCH);
		this.state = state;
	}
	
	/**
	 * Gets the state of a cell
	 * @return The state of the cell
	 */
	public int getState() {
		return state;
	}
	
	/**
	 * Sets the state of the cell
	 * @param state the state of the cell
	 */
	public void setState(int state) {
		this.state = state;
	}
	
	/**
	 * Copies the Cell
	 * @return The new cell newCell
	 */
	public Cell copy() {
		Cell newCell = new Cell(this.getState());
		newCell = this;
		
		return newCell;
	}
	
	/**
	 * Spreads the fire based on the probability of probCatch
	 * @param probCatch the probability that the fire will spread
	 * @param north the north tree
	 * @param east the east tree
	 * @param south the south tree
	 * @param west the west tree
	 */
	public void spread(double probCatch, Cell north, Cell east, Cell south, Cell west) {
		Cell[] cells = {north, east, south, west};
		for (Cell cell : cells) {
			if (cell.getState() == 1) {
				Random rand = new Random();
				double currentRand = rand.nextDouble();
				if (currentRand <= PROBCATCH) {
					cell.setState(Cell.BURNING);
				}
			}
		}
	}	
}
